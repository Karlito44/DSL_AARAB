/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import mydsl.FSM
import mydsl.IntitialState
import mydsl.FinalState

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	var myfsm = resource.contents.get(0) as FSM
	fsa.generateFile('FSM.java', '''abstract class FSM{}''')
	fsa.generateFile('State.java', '''abstract class State{}''')
	fsa.generateFile('IntitialState.java', '''abstract class IntitialState extends State{}''')
	fsa.generateFile('FinalState.java', '''abstract class FinalState extends State{}''')
	fsa.generateFile('Transition.java', '''abstract class Transition{}''')
	myfsm.state.forEach[s | 
		if (s instanceof FinalState){
			fsa.generateFile(s.name + '.java', '''class ''' + s.name + ''' extends FinalState{}''')
			} else if (s instanceof IntitialState){
				fsa.generateFile(s.name + '.java', '''class ''' + s.name + ''' extends IntitialState{}''')
			} else {
				fsa.generateFile(s.name + '.java', '''class ''' + s.name + ''' extends State{}'''
			)
		}			
	]
	myfsm.transition.forEach[t | 
		fsa.generateFile(t.name + '.java', '''class ''' + t.name + ''' extends Transition{}''')]
		fsa.generateFile(myfsm.name + '.java', '''class ''' + myfsm.name + ''' extends FSM{
			public static void main(String args[]){
				State initialState = new Initial();
				State finalState = new Final();
				State current =  initialState;
				System.out.println("Start");
				while (current != finalState){
					switch (current.getClass().getName()) {
						case "Initial":
							System.out.println("Transition initial to open");
							current = new Open();
							break;
						case "Open":
							System.out.println("Transition open to close");
							current = new Close();
							break;
						case "Close":
							System.out.println("Transition close to final");
							current = finalState;
							break;
						}
					}
				System.out.println("Etat final atteind");
			}''')
	}
}
